{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["// Copyright 2017 huteng (huteng@gagogroup.com). All rights reserved.,\r\n// Use of this source code is governed a license that can be found in the LICENSE file.\r\n\r\nimport * as path from \"path\";\r\nimport * as proj4 from \"proj4\";\r\n\r\nimport {DBClient, QueryResult, SelectQuery} from \"sakura-node-3\";\r\nimport {WGS84} from \"proj4\";\r\n\r\nlet mapnik = require(\"mapnik\");\r\n\r\n\r\n/**\r\n * 初始化参数\r\n */\r\nexport interface MapnikServiceOptions {\r\n  client: DBClient; // 用于查询的数据库\r\n}\r\n\r\n/**\r\n * 坐标系\r\n */\r\nexport enum SpatialReference {\r\n  WGS84 = 0\r\n}\r\n\r\ninterface GeoJson {\r\n  type: string;\r\n  properties: any;\r\n  geometry: any;\r\n}\r\n\r\ninterface GeoJsonFeatureCollection {\r\n  type: string;\r\n  crs: {type: string, properties: any};\r\n  features: GeoJson[];\r\n}\r\n\r\n\r\n/**\r\n * Mapnik 对 MySQL 的兼容性支持\r\n *\r\n * Usage:\r\n *  MapnikService.init({client: client, spatialReference: SpatialReference.WGS84}); // 其中 client 为初始化过的 DBClient\r\n *  const pbf: Buffer = await MapnikService.queryTileAsPbf(\"lands\", [\"owner\", \"displayName\"], 3, 7, 5);\r\n */\r\nexport class MapnikService {\r\n  private static client_: DBClient;\r\n  private static spatialReference_: SpatialReference;\r\n\r\n  /**\r\n   * 初始化 service\r\n   * @param options 可选参数\r\n   */\r\n  static async init(options: MapnikServiceOptions): Promise<void> {\r\n    const client: DBClient = options.client;\r\n\r\n    MapnikService.client_ = client;\r\n    MapnikService.spatialReference_ = SpatialReference.WGS84;\r\n\r\n    // MySQL 依赖 spatial_ref_sys 表来索引坐标系，故在初始化时应建表并插入数据\r\n    //  SRID int(11)\r\n    //  AUTH_NAME varchar(256)\r\n    //  AUTH_SRID int(11)\r\n    //  SRTEXT varchar(2048)\r\n    const createTableSql: string =\r\n      `CREATE TABLE IF NOT EXISTS spatial_ref_sys\r\n(\r\n    SRID INT(11) PRIMARY KEY NOT NULL,\r\n    AUTH_NAME VARCHAR(256),\r\n    AUTH_SRID INT(11),\r\n    SRTEXT VARCHAR(2048)\r\n);\r\nCREATE UNIQUE INDEX spatial_ref_sys_SRID_uindex ON spatial_ref_sys (SRID);`;\r\n    //await client.query(createTableSql);\r\n\r\n    // 根据用户指定的坐标系加入\r\n    //const replaceSql: string = MapnikService.spaRefSysReplaceSql_(options.spatialReference);\r\n    //await client.query(replaceSql);\r\n  }\r\n\r\n  /**\r\n   * 根据 Google 瓦片行列号查询数据并将其转为 pbf 返回\r\n   * @param tableName 数据库表名\r\n   * @param fields 需要查询的列名\r\n   * @param z Tile Zoom Level\r\n   * @param x Tile X\r\n   * @param y Tile Y\r\n   * @param compression 压缩，默认不压缩，如果压缩可以支持 gzip\r\n   * @returns {Promise<Buffer>} pbf 流\r\n   */\r\n  static async queryTileAsPbf(tableName: string, layerName: string , geomFieldName: string , fields: string[], z: number, x: number, y: number,\r\n                              compression: \"none\" | \"gzip\" = \"none\"): Promise<Buffer> {\r\n    // 查询 Polygon 并返回 GeoJSON 格式\r\n    let result: QueryResult = await MapnikService.queryFeaturesAsGeoJson_(tableName, layerName , geomFieldName, fields, z, x, y);\r\n\r\n    // 转为 GeoJSON Feature Collection 的格式\r\n    let featureCollection: GeoJsonFeatureCollection = MapnikService.queryResultToFeatureCollection_(result);\r\n\r\n    // 使用 Mapnik 转 pbf\r\n    return new Promise<Buffer>((resolve, reject) => {\r\n      mapnik.register_datasource((path.join(mapnik.settings.paths.input_plugins, \"geojson.input\")));\r\n      let vt: any = new mapnik.VectorTile(z, x, y);\r\n      vt.addGeoJSON(JSON.stringify(featureCollection), layerName , {});\r\n      vt.toGeoJSONSync(0);\r\n      vt.getData({\r\n        compression: compression,\r\n        level: 9,\r\n        strategy: \"FILTERED\"\r\n      }, (err: any, data: Buffer) => {\r\n        if (err) {\r\n          reject(err);\r\n        } else {\r\n          resolve(data);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param tableName\r\n   * @param fields\r\n   * @param z\r\n   * @param x\r\n   * @param y\r\n   * @returns {Promise<QueryResult>}\r\n   * @private\r\n   */\r\n  private static async queryFeaturesAsGeoJson_(tableName: string, layerName: string , geomFieldName: string , fields: string[], z: number, x: number, y: number): Promise<QueryResult> {\r\n    let vt: any = new mapnik.VectorTile(z, x, y);\r\n    let extent: number[] = vt.extent();\r\n\r\n    // TODO(lin.xiaoe.f@gmail.com): 暂时只支持墨卡托\r\n    let firstProjection: string = \"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs\";\r\n    let secondProjection: string = MapnikService.proj4StringFromSpatialReference_(MapnikService.spatialReference_);\r\n\r\n    let leftDown: any = proj4(firstProjection, secondProjection, [extent[0], extent[1]]);\r\n    let rightUp: any = proj4(firstProjection, secondProjection, [extent[2], extent[3]]);\r\n    let leftUp: any = proj4(firstProjection, secondProjection, [extent[0], extent[3]]);\r\n    let rightDown: any = proj4(firstProjection, secondProjection, [extent[2], extent[1]]);\r\n\r\n    // 闭合的 POLYGON\r\n    const coordinates: number[] = [...leftDown, ...leftUp, ...rightUp, ...rightDown, ...leftDown];\r\n\r\n    let polygon: string = `'POLYGON((${coordinates[0]} ${coordinates[1]}, \r\n                                                          ${coordinates[2]} ${coordinates[3]},  \r\n                                                          ${coordinates[4]} ${coordinates[5]}, \r\n                                                          ${coordinates[6]} ${coordinates[7]},    \r\n                                                          ${coordinates[8]} ${coordinates[9]}))'`;\r\n    let where: string = `st_Contains(GeomFromText(${polygon}, ${MapnikService.spatialReference_}), ${ geomFieldName }) or st_overlaps(GeomFromText(${polygon}, ${MapnikService.spatialReference_}), ${  geomFieldName })`;\r\n    const query: SelectQuery = new SelectQuery().fromTable(tableName).select([`ST_AsGeoJSON(${ geomFieldName }) AS geojson`, ...fields]).where(where);\r\n    return await MapnikService.client_.query(query);\r\n  }\r\n\r\n  /**\r\n   * 转为 Mapnik 需要的 GeoJSON Feature Collection 格式\r\n   * @param result QueryResult\r\n   * @returns {GeoJsonFeatureCollection} GeoJSON Feature Collection\r\n   * @private\r\n   */\r\n  private static queryResultToFeatureCollection_(result: QueryResult): GeoJsonFeatureCollection {\r\n    let features: Array<GeoJson> = [];\r\n\r\n    for (let row of result.rows) {\r\n      let geoJson: any = JSON.parse(row[\"geojson\"]);\r\n      // delete row[\"SHAPE\"];\r\n      delete row[\"geojson\"];\r\n      let columnGeoInfo: GeoJson = {\r\n        \"type\": \"Feature\",\r\n        \"properties\": row,\r\n        \"geometry\": geoJson\r\n      };\r\n      features.push(columnGeoInfo);\r\n    }\r\n\r\n    return {\r\n      \"crs\": {\"type\": \"name\", \"properties\": {\"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\"}},\r\n      \"type\": \"FeatureCollection\",\r\n      \"features\": features\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 根据坐标系给出 MySQL 创建 spa_ref_sys 表的 sql\r\n   * @param spf 坐标系\r\n   * @returns {string} 插入的 SQL\r\n   * @private\r\n   */\r\n  private static spaRefSysReplaceSql_(spf: SpatialReference): string {\r\n    if (spf === SpatialReference.WGS84) {\r\n      return `REPLACE INTO spatial_ref_sys (SRID, AUTH_NAME, AUTH_SRID, SRTEXT) VALUES (${WGS84}, null, null, 'GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]]');`;\r\n    } else {\r\n      throw new Error(\"Unknown spatial reference\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 转出坐标系的 string 表达式\r\n   * @private\r\n   */\r\n  private static proj4StringFromSpatialReference_(spf: SpatialReference): string {\r\n    if (spf === SpatialReference.WGS84) {\r\n      return `+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs`;\r\n    } else {\r\n      throw new Error(\"Unknown spatial reference\");\r\n    }\r\n  }\r\n}\r\n"]}